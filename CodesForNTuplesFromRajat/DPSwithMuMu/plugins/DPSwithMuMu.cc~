// muon id and correction factor
#include "ZplusJets/DPSwithMuMu/interface/DPSwithMuMu.h"

int n_events=0.0;
void DPSwithMuMu::analyze(const edm::Event& iEvent, const edm::EventSetup& iSetup){
	hEvents->Fill(1);
	beginEvent();

	endEvent();
	using namespace std;
	using namespace edm;
	using namespace math;


	Handle<edm::View<pat::Jet>> patjets;     
	iEvent.getByToken(theJetTag,patjets);


	//beam spot
	edm::Handle<reco::BeamSpot> beamspot_h;
	iEvent.getByToken(beamSpotTag, beamspot_h);
	const reco::BeamSpot &beamSpot = *(beamspot_h.product());

	//muons collection
	Handle<View<pat::Muon> > hMuonProduct;
	iEvent.getByToken(theMuonTag, hMuonProduct);

	//MET
	//	edm::Handle<edm::View<pat::MET> >mets;
	edm::Handle<pat::METCollection> mets;
	iEvent.getByToken(theMetTag,mets);



	//vertices
	edm::Handle<vector<reco::Vertex>> vtx_h;
	iEvent.getByToken(theVtxTag, vtx_h);


	//read the trigger results
	edm::Handle<edm::TriggerResults> triggerBits;
	iEvent.getByToken(triggerBits_, triggerBits);

	Handle<double> hRho;
	iEvent.getByToken(theRhoTag,hRho);

	edm::ESHandle<JetCorrectorParametersCollection> JetCorParColl;
	iSetup.get<JetCorrectionsRecord>().get("AK4PFchs",JetCorParColl); 
	JetCorrectorParameters const & JetCorPar = (*JetCorParColl)["Uncertainty"];
	JetCorrectionUncertainty jecUnc (JetCorPar);



	const Vertex* vertex = 0;
	if(vtx_h->size() == 0) return;

	T_Rho.push_back(*hRho);

	if(isMC_){ 

		edm::Handle<GenEventInfoProduct> genEvt;
		iEvent.getByToken(theGenTag,genEvt);
		aMCatNLOweight=genEvt->weight();

		edm::Handle <edm::View<reco::GenJet> > genJets_;
		iEvent.getByToken(theGenJetTag,genJets_);
		for(edm::View<reco::GenJet>::const_iterator iter=genJets_->begin(); iter!=genJets_->end(); ++iter){
			if(printDebug_)  cout<<"iter->px()"<<iter->px()<<"iter->py()"<<iter->py()<<"iter->pz()"<<iter->pz()<<endl;
			T_gen_Jet_Px.push_back(iter->px());
			T_gen_Jet_Py.push_back(iter->py());
			T_gen_Jet_Energy.push_back(iter->energy());
			T_gen_Jet_Pz.push_back(iter->pz());

		}//get jets
		// gen level stuff



		edm::Handle <View<reco::GenParticle> > genParticles;
		iEvent.getByToken(src_, genParticles); 
		genMuonVector.clear();
		for(size_t i = 0; i < genParticles->size() ; ++ i){
		 
			const reco::GenParticle & genP = (*genParticles)[i];
			const reco::Candidate* m = &genP; 
			const reco::GenParticle* genMuonAll = &((*genParticles)[i]);

			if(fabs(m->pdgId()) == 13 && m->status() == 1 && m->pt() >=10  && fabs(m->eta()) <= 2.4) {


			  //			  std::sort(genMuonVector.begin(), genMuonVector.end(), genptComparator);

				if(m->numberOfMothers()>0) {
					const reco::Candidate* MothPtr;
					MothPtr = IsFromID (m, 23);
					if (MothPtr != NULL) // save space, only add userfloats when valid
					{
					  genMuonVector.push_back(genMuonAll);

					}
				}
			}
		}
		std::sort(genMuonVector.begin(), genMuonVector.end(), genptComparator);
		if(genMuonVector.size()>0){
		  for (unsigned int j=0;j<genMuonVector.size();j++){
		    if(printDebug_)  cout<<"inside Loop"<<endl;
		    T_gen_mu_energy.push_back(genMuonVector[j]->energy());
		    T_gen_mu_mass.push_back(genMuonVector[j]->mass());
		    T_gen_mu_et.push_back(genMuonVector[j]->et());
		    T_gen_mu_charge.push_back(genMuonVector[j]->charge());
		    T_gen_mu_pz.push_back(genMuonVector[j]->pz());
		    T_gen_mu_px.push_back(genMuonVector[j]->px());
		    T_gen_mu_py.push_back(genMuonVector[j]->py());
		  }
		}
		
		
		for(size_t i = 0; i < genParticles->size() ; ++ i){
		  const reco::GenParticle & q = (*genParticles)[i];
		  
		  if(fabs(q.pdgId()) <=6){
		    if(printDebug_)     cout<<"gen particle  pdgid and status \t"<<q.pdgId()<<"\t"<<q.status()<<endl;
		    T_gen_part_pdgid.push_back(q.pdgId());
		    T_gen_part_energy.push_back(q.energy());
		    T_gen_part_status.push_back(q.status());
		    T_gen_part_mother_pdgid.push_back(q.mother(0)->pdgId());
		    T_gen_part_px.push_back(q.px());
		    T_gen_part_py.push_back(q.py());
				T_gen_part_pz.push_back(q.pz());
				
				
		  }
		}// gen particles loop
		
	}// for mC only gen level info
	// jets
	//

	vertex = &(vtx_h->front());

	nvertices=vtx_h->size();
	if(printDebug_)cout<<" no of vertices"<<nvertices<<endl;
	T_nvertices.push_back(nvertices);


	T_Event_RunNumber = iEvent.id().run();
	T_Event_LuminosityBlock = iEvent.id().luminosityBlock(); 
	T_Event_EventNumber = iEvent.id().event();

	fired=false;

	const edm::TriggerNames &names = iEvent.triggerNames(*triggerBits);
	trigDecision->insert(trigDecision->begin()+0,0);
	trigDecision->insert(trigDecision->begin()+1,0);
        trigDecision->insert(trigDecision->begin()+2,0);

	size_t npos = -1;
	for(unsigned i=0;i<names.size();i++){
		if((names.triggerName(i).find("HLT_Mu17_TrkIsoVVL_Mu8_TrkIsoVVL_v") != npos) || (names.triggerName(i).find("HLT_Mu17_TrkIsoVVL_TkMu8_TrkIsoVVL_v") != npos)){
			if(triggerBits->accept(i)){
				trigDecision->insert(trigDecision->begin()+0,1);
				fired=true;
			}
		}

		if((names.triggerName(i).find("HLT_IsoMu22_v") != npos) || (names.triggerName(i).find("HLT_IsoTkMu22_v") != npos)) {
			if(triggerBits->accept(i)){
				trigDecision->insert(trigDecision->begin()+1,1);
				fired=true;
			}
		}

		if((names.triggerName(i).find("HLT_IsoMu24_v") != npos) || (names.triggerName(i).find("HLT_IsoTkMu24_v") != npos)) {
                        if(triggerBits->accept(i)){
                                trigDecision->insert(trigDecision->begin()+2,1);
                                fired=true;
                        }
                }
	}

//	if(isMC_) {fired = true; } // needed as no trigger is there in Sping 16 Samples
//	if(fired){
		//pileup weight extraction
		//varibles mc and datf for pileup estimation
		//std::cout<<"event is fired in MC!!!!!!!"<<std::endl;
		if(isMC_){
			int TruePUI = -99;
			Handle<std::vector< PileupSummaryInfo > > PupInfo;
			iEvent.getByToken(thePUTag,PupInfo);
			std::vector<PileupSummaryInfo>::const_iterator PVI;

			for(PVI = PupInfo->begin(); PVI != PupInfo->end(); ++PVI){
				int BX = PVI->getBunchCrossing();
				if(BX == 0){
					TruePUI = PVI->getTrueNumInteractions();
					continue;
				} 
			}//Pileup info loop ends

			weights.push_back(TruePUI);


		}//for MC only


		//  int nMuons=0;
		
                int muonsize = hMuonProduct->size();
                int itMuon;
                MuonVector.clear();

                if(hMuonProduct->size()>0){
	         for(itMuon=0; itMuon < muonsize; ++itMuon){
      		 const pat::Muon* muonAll = &((*hMuonProduct)[itMuon]);
      		 MuonVector.push_back(muonAll);
    		 }
  		}		



		/*for(edm::View<pat::Muon>::const_iterator iMuon = hMuonProduct->begin();iMuon != hMuonProduct->end(); ++iMuon){
		  //		  const reco::Muon* muonAll = &((*imuons)[itMuon]);
		  //		  const reco::MuonCollection inMuons = *(hMuonProduct.product());

		  float iso_val= (iMuon->pfIsolationR04().sumChargedHadronPt+max(0.,iMuon->pfIsolationR04().sumNeutralHadronEt+iMuon->pfIsolationR04().sumPhotonEt-0.5*iMuon->pfIsolationR04().sumPUPt))/iMuon->pt();
		  if(muon::isMediumMuon(*iMuon) && iMuon->pt() > 10.0 && fabs(iMuon->eta()) <2.4 && iso_val > 0.15){
			    MuonVector.push_back(*iMuon);
			  }//Medium muons
			  
			  }*/


		  std::sort(MuonVector.begin(), MuonVector.end(), ptComparator);
			
			for (unsigned int i=0;i<MuonVector.size();i++){

			  float iso_val= (MuonVector[i]->pfIsolationR04().sumChargedHadronPt+max(0.,MuonVector[i]->pfIsolationR04().sumNeutralHadronEt+MuonVector[i]->pfIsolationR04().sumPhotonEt-0.5*MuonVector[i]->pfIsolationR04().sumPUPt))/MuonVector[i]->pt();

			bool goodGlob = MuonVector[i]->isGlobalMuon() &&
			MuonVector[i]->globalTrack()->normalizedChi2() < 3 &&
			MuonVector[i]->combinedQuality().chi2LocalPosition < 12 &&
			MuonVector[i]->combinedQuality().trkKink < 20;
			bool isMedium = muon::isLooseMuon(*MuonVector[i]) &&
			MuonVector[i]->innerTrack()->validFraction() > 0.49 &&
			muon::segmentCompatibility(*MuonVector[i]) > (goodGlob ? 0.303 : 0.451);

                         if(isMedium &&  MuonVector[i]->pt() > 10.0 && fabs(MuonVector[i]->eta()) <2.4 && iso_val < 0.15){ 
			  T_mu_Glob.push_back(MuonVector[i]->isGlobalMuon());
			  T_mu_Chi2.push_back(MuonVector[i]->globalTrack().isNonnull() ? MuonVector[i]->globalTrack()->normalizedChi2() : -1);
			  T_mu_validfraction.push_back(MuonVector[i]->innerTrack().isNonnull() ? MuonVector[i]->innerTrack()->validFraction() : -1);
			  T_mu_localPos.push_back(MuonVector[i]->combinedQuality().chi2LocalPosition);
			  T_mu_kinkFinder.push_back(MuonVector[i]->combinedQuality().trkKink);
			  T_mu_segcomp.push_back(muon::segmentCompatibility(*MuonVector[i]));
			  
			  T_mu_pfreliso.push_back(iso_val);
			  T_mu_phi.push_back(MuonVector[i]->phi());
			  T_mu_eta.push_back(MuonVector[i]->eta());
			  T_mu_energy.push_back(MuonVector[i]->energy());
			  T_mu_charge.push_back(MuonVector[i]->charge());
			  T_mu_px.push_back(MuonVector[i]->px());
			  T_mu_py.push_back(MuonVector[i]->py());
			  T_mu_pz.push_back(MuonVector[i]->pz());
			  T_mu_lead_vtx_d0.push_back(MuonVector[i]->globalTrack().isNonnull() ? MuonVector[i]->globalTrack()->dxy(vertex->position()) : 999);
			  T_mu_lead_vtx_dz.push_back(MuonVector[i]->globalTrack().isNonnull() ? MuonVector[i]->globalTrack()->vz() - vertex->position().z() : 999);
			  T_mu_beamSpot_d0.push_back(MuonVector[i]->globalTrack().isNonnull() ? MuonVector[i]->globalTrack()->dxy(beamSpot.position()) : 999);
			  T_mu_beamSpot_dz.push_back(MuonVector[i]->globalTrack().isNonnull() ? MuonVector[i]->globalTrack()->dz(beamSpot.position()) : 999);
			  
			}//muon cuts  
			}//iMuon; loop ends
			


		const pat::MET &met = mets->front();


		if(printDebug_)cout<<" MET LOOP"<<endl;
		T_MET_ET = met.et();
		T_MET_Phi = met.phi();
		if(printDebug_)cout<<"T_MET_Phi ="<<T_MET_Phi<<endl;
		float met_x   =  met.px();
		float met_y   =  met.py();
		T_MET_Pt  = sqrt(met_x*met_x + met_y*met_y);

		for(edm::View<pat::Jet>::const_iterator iJet = patjets->begin();iJet != patjets->end(); ++iJet){
			if(iJet->pt()>10.0){

				T_Jet_CSV.push_back(iJet->bDiscriminator("pfJetProbabilityBJetTags"));
				T_Jet_CSVMVA.push_back(iJet->bDiscriminator("pfCombinedInclusiveSecondaryVertexV2BJetTags"));
			  	T_Jet_JBP.push_back(iJet->bDiscriminator("pfCombinedMVAV2BJetTags"));

				float NHF = iJet->neutralHadronEnergyFraction();
				float NEMF = iJet->neutralEmEnergyFraction();
				float CHF = iJet->chargedHadronEnergyFraction();
				MUF = iJet->muonEnergyFraction();
				float CEMF = iJet->chargedEmEnergyFraction();
				int NumNeutralParticles =iJet->neutralMultiplicity();
				chargedMult = iJet->chargedMultiplicity();
				int NumConst = iJet->chargedMultiplicity()+NumNeutralParticles;
				float CHM = iJet->chargedMultiplicity();
				float absjeta = fabs(iJet->eta());

				bool looseJetID = false;
				bool tightJetID = false;
				if (absjeta <= 2.7)
				{
					looseJetID = ( (NHF<0.99 && NEMF<0.99 && NumConst>1) && ((absjeta<=2.4 && CHF>0 && CHM>0 && CEMF<0.99) || absjeta>2.4) );
					tightJetID = ( (NHF<0.90 && NEMF<0.90 && NumConst>1) && ((absjeta<=2.4 && CHF>0 && CHM>0 && CEMF<0.99) || absjeta>2.4) );

				}
				else if (absjeta <= 3.0 && absjeta > 2.7)
				{
					looseJetID = (NEMF<0.90 && NumNeutralParticles>2 ) ;
					tightJetID = looseJetID;

				}
				else
				{
					looseJetID = (NEMF<0.90 && NumNeutralParticles>10 );
					tightJetID = looseJetID;   

				}

				flag_loose_jetid.push_back(looseJetID);
				flag_tight_jetid.push_back(tightJetID);

				T_Jet_Px.push_back(iJet->px());
				T_Jet_Py.push_back(iJet->py());
				T_Jet_Pz.push_back(iJet->pz());
				T_Jet_Energy.push_back(iJet->energy());
				T_Jet_Mass.push_back(iJet->mass());
				T_Jet_Area.push_back(iJet->jetArea());

				T_Jet_parton_flavor.push_back(abs(iJet->partonFlavour()));
				float jecFactor = iJet->jecFactor("Uncorrected") ;
				T_Jet_rawF.push_back(jecFactor);
				jecUnc.setJetEta(iJet->eta());
				jecUnc.setJetPt(iJet->pt()); // here you must use the CORRECTED jet pt
				T_Jet_jecUnc.push_back(jecUnc.getUncertainty(true));

			}//jet pt cut
		}//patjets
		
																			 if(T_gen_mu_charge.size()>=2 || T_mu_charge.size()>=2){
		mytree_->Fill();}

	//}// fired 
}//analyze fxtn



// ------------ method called once each job just before starting event loop  ------------
	void 
DPSwithMuMu::beginJob()
{

	mytree_ = new TTree("eventsTree","");

	trigDecision = new std::vector<bool>;
	mytree_->Branch("triggerFired",&fired);	
	mytree_->Branch("T_Rho", "std::vector<double>", &T_Rho);
	mytree_->Branch("aMCatNLOweight",&aMCatNLOweight,"aMCatNLOweight/F"); 
	mytree_->Branch("trigDecision","std::vector<bool>",&trigDecision);
	mytree_->Branch("T_gen_part_pdgid","std::vector<int>",&T_gen_part_pdgid);
	mytree_->Branch("T_gen_part_mother_pdgid","std::vector<int>",&T_gen_part_mother_pdgid);
	mytree_->Branch("T_gen_part_status","std::vector<int>",&T_gen_part_status);
	mytree_->Branch("T_gen_part_energy","std::vector<float>",&T_gen_part_energy);
	mytree_->Branch("T_gen_part_px", "std::vector<float>", &T_gen_part_px);
	mytree_->Branch("T_gen_part_py", "std::vector<float>", &T_gen_part_py);
	mytree_->Branch("T_gen_part_pz", "std::vector<float>", &T_gen_part_pz);


	mytree_->Branch("T_gen_mu_energy", "std::vector<float>", &T_gen_mu_energy);
	mytree_->Branch("T_gen_mu_mass", "std::vector<float>", &T_gen_mu_mass);
	mytree_->Branch("T_gen_mu_et", "std::vector<float>", &T_gen_mu_et);
	mytree_->Branch("T_gen_mu_charge", "std::vector<int>", &T_gen_mu_charge);
	mytree_->Branch("T_gen_mu_pz", "std::vector<float>", &T_gen_mu_pz);
	mytree_->Branch("T_gen_mu_px", "std::vector<float>", &T_gen_mu_px);
	mytree_->Branch("T_gen_mu_py", "std::vector<float>", &T_gen_mu_py);

	mytree_->Branch("T_gen_Jet_Px",      "std::vector<float>",&T_gen_Jet_Px);
	mytree_->Branch("T_gen_Jet_Py",      "std::vector<float>",&T_gen_Jet_Py);
	mytree_->Branch("T_gen_Jet_Energy",     "std::vector<float>",&T_gen_Jet_Energy);
	mytree_->Branch("T_gen_Jet_Pz",     "std::vector<float>",&T_gen_Jet_Pz);


	mytree_->Branch("flag_loose_jetid", "std::vector<bool>",&flag_loose_jetid);
	mytree_->Branch("flag_tight_jetid", "std::vector<bool>",&flag_tight_jetid);


	mytree_->Branch("T_Event_RunNumber",      &T_Event_RunNumber,       "T_Event_RunNumber/I");
	mytree_->Branch("T_Event_EventNumber",    &T_Event_EventNumber,     "T_Event_EventNumber/I");
	mytree_->Branch("T_Event_LuminosityBlock",&T_Event_LuminosityBlock, "T_Event_LuminosityBlock/I");

	//Vertex
	mytree_->Branch("T_nvertices","std::vector<int>",&T_nvertices);
	mytree_->Branch("nvertices", &nvertices,"nvertices/I");


	mytree_->Branch("T_MET_ET",  &T_MET_ET,  "T_MET_ET/D");
	mytree_->Branch("T_MET_Phi", &T_MET_Phi, "T_MET_Phi/D");
	mytree_->Branch("T_MET_Pt",  &T_MET_Pt,  "T_MET_Pt/D");
	mytree_->Branch("trigger_name",&trigger_name);

	mytree_->Branch("T_mu_pz",      "std::vector<float>", &T_mu_pz);
	mytree_->Branch("T_mu_energy",  "std::vector<float>", &T_mu_energy);
	mytree_->Branch("T_mu_charge",  "std::vector<int>",   &T_mu_charge);
	mytree_->Branch("T_mu_pfreliso","std::vector<float>", &T_mu_pfreliso);

	mytree_->Branch("T_mu_beamSpot_d0", "std::vector<float>", &T_mu_beamSpot_d0);
	mytree_->Branch("T_mu_beamSpot_dz", "std::vector<float>", &T_mu_beamSpot_dz);
	mytree_->Branch("T_mu_Glob",      "std::vector<float>", &T_mu_Glob); 
	mytree_->Branch("T_mu_Chi2",      "std::vector<float>", &T_mu_Chi2);
	mytree_->Branch("T_mu_validfraction",      "std::vector<float>", &T_mu_validfraction); 
	mytree_->Branch("T_mu_localPos",      "std::vector<float>",  &T_mu_localPos);
	mytree_->Branch("T_mu_kinkFinder",      "std::vector<float>", &T_mu_kinkFinder);
	mytree_->Branch("T_mu_segcomp",      "std::vector<float>", &T_mu_segcomp); 
	mytree_->Branch("T_mu_px",      "std::vector<float>",  &T_mu_px);
	mytree_->Branch("T_mu_py",      "std::vector<float>", &T_mu_py);
	mytree_->Branch("T_mu_lead_vtx_d0",      "std::vector<float>",  &T_mu_lead_vtx_d0);
	mytree_->Branch("T_mu_lead_vtx_dz",      "std::vector<float>", &T_mu_lead_vtx_dz);

	mytree_->Branch("T_Jet_Px",      "std::vector<float>", &T_Jet_Px);
	mytree_->Branch("T_Jet_Py",      "std::vector<float>", &T_Jet_Py);
	mytree_->Branch("T_Jet_Pz",     "std::vector<float>",&T_Jet_Pz); 
	mytree_->Branch("T_Jet_Area",     "std::vector<float>",&T_Jet_Area); 
	mytree_->Branch("T_Jet_Energy",      "std::vector<float>", &T_Jet_Energy);
	mytree_->Branch("T_Jet_Mass",      "std::vector<float>", &T_Jet_Mass);
	mytree_->Branch("T_Jet_rawF",      "std::vector<float>", &T_Jet_rawF);
	mytree_->Branch("T_Jet_jecUnc",      "std::vector<float>", &T_Jet_jecUnc);

	mytree_->Branch("T_Jet_CSV",      "std::vector<float>",&T_Jet_CSV);
  	mytree_->Branch("T_Jet_CSVMVA",   "std::vector<float>",&T_Jet_CSVMVA);
        mytree_->Branch("T_Jet_JBP",  "std::vector<float>",&T_Jet_JBP);

  	mytree_->Branch("T_Jet_parton_flavor", "std::vector<int>",&T_Jet_parton_flavor);

        mytree_->Branch("weights",   "std::vector<float>",&weights);


}//begin job
// ------------ method called once each job just after ending the event loop  ------------
	void 
DPSwithMuMu::endJob() 
{
	delete trigDecision;
	rootFile_->cd();
	mytree_->Write();
	hEvents->Write();
	rootFile_->Write();
	rootFile_->Close();

}

// ------------ method called when starting to processes a run  ------------
	void 
DPSwithMuMu::beginRun(edm::Run const&, edm::EventSetup const&)
{
}

// ------------ method called when ending the processing of a run  ------------
	void 
DPSwithMuMu::endRun(edm::Run const&, edm::EventSetup const&)
{
}

// ------------ method called when starting to processes a luminosity block  ------------
	void 
DPSwithMuMu::beginLuminosityBlock(edm::LuminosityBlock const&, edm::EventSetup const&)
{
}

// ------------ method called when ending the processing of a luminosity block  ------------
	void 
DPSwithMuMu::endLuminosityBlock(edm::LuminosityBlock const&, edm::EventSetup const&)
{
}

const reco::Candidate* DPSwithMuMu::IsFromID (const reco::Candidate* part, int targetPDGId)
{
	if (abs(part->pdgId()) == targetPDGId){ 

		return part;
	}

	for (unsigned int i = 0; i < part->numberOfMothers(); i++)
	{
		const reco::Candidate* matchMoth = IsFromID(part->mother(i), targetPDGId);
		if ( matchMoth != NULL) return matchMoth;
	}

	// nothing found, mothers finished, exiting...
	return NULL;

}
	void 
DPSwithMuMu::beginEvent()
{


}
void DPSwithMuMu::endEvent(){

	T_Rho.clear();
	trigDecision->clear();
	T_gen_part_pdgid.clear();
	T_gen_part_mother_pdgid.clear();
	T_gen_part_status.clear();
	T_gen_part_energy.clear();

	T_gen_mu_energy.clear();
	T_gen_mu_mass.clear();
	T_gen_mu_et.clear();
	T_gen_mu_charge.clear();
	T_gen_mu_pz.clear();
	T_gen_mu_px.clear();
	T_gen_mu_py.clear();
	T_gen_part_px.clear();
	T_gen_part_py.clear();
	T_gen_part_pz.clear();

	T_gen_Jet_Px.clear();
	T_gen_Jet_Py.clear();

	T_gen_Jet_Pt.clear();
	T_gen_Jet_Eta.clear();
	T_gen_Jet_Phi.clear();
	T_gen_Jet_Energy.clear();
	T_gen_Jet_Pz.clear();

	T_Jet_Pt.clear();
	T_Jet_Eta.clear();
	T_Jet_Area.clear();

	T_Jet_Phi.clear();
	T_Jet_Pz.clear();
	flag_loose_jetid.clear();
	flag_tight_jetid.clear();
	T_Jet_parton_flavor.clear();
	weights.clear();
	T_nvertices.clear();
	trigger_name.clear();
	T_mu_pz.clear();
	T_mu_dz.clear();
	T_mu_pt.clear();
	T_mu_phi.clear();
	T_mu_eta.clear();
	T_mu_energy.clear();
	T_mu_charge.clear();
	T_mu_pfreliso.clear();
	T_mu_d0.clear();
	T_mu_lead_vtx_d0.clear();
	T_mu_lead_vtx_dz.clear();
	T_mu_beamSpot_d0.clear();
	T_mu_beamSpot_dz.clear();
	T_mu_lead_vtx_pos.clear();
	T_mu_Glob.clear();
	T_mu_Chi2.clear();
	T_mu_validfraction.clear();
	T_mu_localPos.clear();
	T_mu_kinkFinder.clear();
	T_mu_segcomp.clear();
	T_mu_px.clear();
	T_mu_py.clear();

	T_Jet_CSV.clear();
	T_Jet_CSVMVA.clear();
	T_Jet_JBP.clear();
	T_Jet_Px.clear();
	T_Jet_Py.clear();
	T_Jet_Energy.clear();
	T_Jet_Mass.clear();
	T_Jet_rawF.clear();
	T_Jet_jecUnc.clear();



	//Vertex 
	nvertices=0;


	T_MET_ET=-999.0;
	T_MET_Pt=-999.0;
	T_MET_Phi=-999.0;

	T_Event_RunNumber=-999.0;T_Event_EventNumber=-999.0;T_Event_LuminosityBlock=-999.0;

}

float DPSwithMuMu::deltaPhi(float phi1, float phi2)
{
	float dphi;
	if(phi1<0) phi1+=2*TMath::Pi();
	if(phi2<0) phi2+=2*TMath::Pi();
	dphi=fabs(phi1-phi2);
	if(dphi>2*TMath::Pi()) dphi-=2*TMath::Pi();
	if(dphi>TMath::Pi()) dphi=2*TMath::Pi()-dphi;
	return dphi;
}


// ------------ method fills 'descriptions' with the allowed parameters for the module  ------------
void
DPSwithMuMu::fillDescriptions(edm::ConfigurationDescriptions& descriptions) {
	//The following says we do not know what parameters are allowed so do no validation
	// Please change this to state exactly what you do use, even if it is no parameters
	edm::ParameterSetDescription desc;
	desc.setUnknown();
	descriptions.addDefault(desc);
}



//define this as a plug-in
DEFINE_FWK_MODULE(DPSwithMuMu);
